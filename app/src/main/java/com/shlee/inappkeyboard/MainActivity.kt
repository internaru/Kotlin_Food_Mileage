package com.shlee.inappkeyboard

import android.os.Bundle
import android.text.InputType
import android.view.View
import android.view.inputmethod.EditorInfo
import android.widget.EditText
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.net.HttpURLConnection
import java.net.URL

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val editText = findViewById<View>(R.id.editText) as EditText
        val keyboard = findViewById<View>(R.id.keyboard) as MyKeyboard

        // prevent system keyboard from appearing when EditText is tapped
        editText.setRawInputType(InputType.TYPE_CLASS_NUMBER)
        editText.setTextIsSelectable(false)

        // Network Check
        checkInternet() { isConnected ->
            if (isConnected) {
                showCustomToast(this, "Network is available", 26f, "GREEN") // Ïó∞Í≤∞Îê®
            } else {
                showCustomToast(this, "Network is not available", 26f, "RED")   // Ïó∞Í≤∞ ÏïàÎê®
            }
        }

        // pass the InputConnection from the EditText to the keyboard
        val ic = editText.onCreateInputConnection(EditorInfo())
        keyboard.setInputConnection(ic)
    }
    override fun onWindowFocusChanged(hasFocus: Boolean) {
        super.onWindowFocusChanged(hasFocus)
        if (!hasFocus) return

        // status bar, navigation bar Ïà®Í∏∞Í∏∞
        WindowCompat.setDecorFitsSystemWindows(window, false)
        WindowInsetsControllerCompat(window, window.decorView).let { controller ->
            controller.hide(WindowInsetsCompat.Type.systemBars())

            // üëâ Ïä§ÏôÄÏù¥ÌîÑÎ°ú Í∫ºÎÇº Ïàò ÏûàÎäî Immersive Î™®Îìú
            controller.systemBarsBehavior =
                WindowInsetsControllerCompat.BEHAVIOR_DEFAULT
        }
    }

    // ÎÑ§Ìä∏ÏõåÌÅ¨ Ï≤¥ÌÅ¨ Ìï®Ïàò
    fun checkInternet(onResult: (Boolean) -> Unit) {
        CoroutineScope(Dispatchers.IO).launch {
            val result = try {
                val url = URL("https://clients3.google.com/generate_204")
                val connection = url.openConnection() as HttpURLConnection
                connection.setRequestProperty("User-Agent", "Android")
                connection.setRequestProperty("Connection", "close")
                connection.connectTimeout = 1500
                connection.connect()
                connection.responseCode == 204
            } catch (e: Exception) {
                false
            }

            // Î©îÏù∏(UI) Ïä§Î†àÎìúÎ°ú Í≤∞Í≥º Ï†ÑÎã¨
            withContext(Dispatchers.Main) {
                onResult(result)
            }
        }
    }
}